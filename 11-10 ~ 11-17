import csv

proximity_dict_SP_raw = {}

with open('proximity_SP_final.tsv') as f:
    tr = csv.reader(f, delimiter='\t')
    row1 = next(tr)
    for row in tr:
        proximity_dict_SP_raw[row[0]] = (float(row[1]), float(row[2]))
        
# Proximity가 높은 약물 순서대로 나열 (Barabasi)
top50_SP = list(proximity_dict_SP.keys())[:50]

proximity_dict_SP_final = {}
for drug in proximity_dict_SP_raw.keys():
    proximity_dict_SP_final[drug] = proximity_dict_SP_raw[drug][0]
    
proximity_dict_DJ_raw = {}

with open('proximity_DJ_final.tsv') as f:
    tr = csv.reader(f, delimiter='\t')
    row1 = next(tr)
    for row in tr:
        proximity_dict_DJ_raw[row[0]] = (float(row[1]), float(row[2]))
        
# Proximity가 높은 약물 순서대로 나열 (Pathway-weighted)
top50_DJ = list(proximity_dict_DJ.keys())[:50]

proximity_dict_DJ_final = {}
for drug in proximity_dict_DJ_raw.keys():
    proximity_dict_DJ_final[drug] = proximity_dict_DJ_raw[drug][0]
    
proximity_dict_DJ_hypo1 = {}

with open('proximity_DJ.tsv') as f:
    tr = csv.reader(f, delimiter='\t')
    row1 = next(tr)
    for row in tr:
        proximity_dict_DJ_hypo1[row[0]] = (float(row[1]), float(row[2]))
        
proximity_dict_DJ = {}
for drug in proximity_dict_DJ_hypo1.keys():
    proximity_dict_DJ[drug] = proximity_dict_DJ_hypo1[drug][0]
    
proximity_dict_SP_final

import pandas as pd
######### Dijkstra path method #########
# Dictionary to dataframe
# 0. Parkinson's disease 치료에 쓰이는 drug 찾기
pd_drug = []
for element in drug_disease_pair:
    if element[1] in ['parkinson disease', 'parkinsonian disorders']:
        pd_drug.append(element[0])
        
# 1. Drug / Non-drug
label = []
ind = 0 # drug label이 잘 들어갔는지 확인
for drug in proximity_dict_DJ_final.keys():
    if drug in pd_drug:
        label.append("PD drug")
        ind += 1
    else:
        label.append("Non PD drug")
        
if ind == len(pd_drug):
    print("Good Job!")
else:
    print("PD drug in dictionary is " + str(ind) + " but actual pd drug is " + str(len(pd_drug)))
    
# 2. proximity list
distance_DJ_final = list(proximity_dict_DJ_final.values())

# 3. dictionary
for_boxplot = {}
for_boxplot['distance'] = distance_DJ_final
for_boxplot['label'] = label

# To dataframe
df = pd.DataFrame(for_boxplot)

######### Shortest path method #########
# 1. Drug / Non-drug
label_SP = []
ind_SP = 0 # drug label이 잘 들어갔는지 확인
for drug in proximity_dict_SP_final.keys():
    if drug in pd_drug:
        label_SP.append("PD drug")
        ind_SP += 1
    else:
        label_SP.append("Non PD drug")
        
if ind_SP == len(pd_drug):
    print("Good Job!")
else:
    print("PD drug in dictionary is " + str(ind_SP) + " but actual pd drug is " + str(len(pd_drug)))
    
# 2. proximity list
distance_SP = list(proximity_dict_SP_final.values())

# 3. dictionary
for_boxplot_SP = {}
for_boxplot_SP['distance'] = distance_SP
for_boxplot_SP['label'] = label_SP

# To dataframe
df_SP = pd.DataFrame(for_boxplot_SP)

######### Dijkstra path method previous version #########
# 1. Drug / Non-drug
label_DJ_0 = []
ind_DJ_0 = 0 # drug label이 잘 들어갔는지 확인
for drug in proximity_dict_DJ.keys():
    if drug in pd_drug:
        label_DJ_0.append("PD drug")
        ind_DJ_0 += 1
    else:
        label_DJ_0.append("Non PD drug")
        
if ind_DJ_0 == len(pd_drug):
    print("Good Job!")
else:
    print("PD drug in dictionary is " + str(ind_DJ_0) + " but actual pd drug is " + str(len(pd_drug)))
    
# 2. proximity list
distance_DJ = list(proximity_dict_DJ.values())

# 3. dictionary
for_boxplot_DJ = {}
for_boxplot_DJ['distance'] = distance_DJ
for_boxplot_DJ['label'] = label_DJ_0

# To dataframe
df_DJ = pd.DataFrame(for_boxplot_DJ)

######### Plot #########

# 일단 sns 들어간 코드 가져오기
import seaborn as sns
import matplotlib.pyplot as plt

#from statannot import add_stat_annotation
fig, axes = plt.subplots(1, 3, figsize=(14,3))
######### Shortest path method #########
x2 = "label"
y2 = "distance"
order2 = ['PD drug', 'Non PD drug']
sns.boxplot(data=df_SP, x=x2, y=y2, order=order2, ax=axes[0])

######### Shortest path method #########
x3 = "label"
y3 = "distance"
order3 = ['PD drug', 'Non PD drug']
sns.boxplot(data=df_DJ, x=x3, y=y3, order=order3, ax=axes[1])

######### Dijkstra path method #########
x = "label"
y = "distance"
order = ['PD drug', 'Non PD drug']
sns.boxplot(data=df, x=x, y=y, order=order, ax=axes[2])
sns.despine() # 필요없는 axis border 제거

axes[0].set_title("Non-weighted path length")
axes[1].set_title("Weighted path length (STEP 1)")
axes[2].set_title("Weighted path length (STEP 1 & 2)")

intersection = list(set(top50_SP) & set(top50_DJ))

print("Number of drugs that are coexist in Barabasi & my method is %d"%len(intersection))

for drug in intersection:
    if drug in pd_drug:
        print(drug)
        
only_SP = list(set(top50_SP) - set(top50_DJ))

for drug in only_SP:
    if drug in pd_drug:
        print(drug + ":" + str(len(drug_gene_dict[drug])))

for drug in list(set(list(proximity_dict_SP.keys())) - set(top50_SP)):
    if drug in pd_drug:
        print(drug + ":" + str(len(drug_gene_dict[drug])))

only_DJ = list(set(top50_DJ) - set(top50_SP))

for drug in only_DJ:
    if drug in pd_drug:
        print(drug + ":" + str(len(drug_gene_dict[drug])) + " (%s)"%list(proximity_dict_DJ.keys()).index(drug))
        
for drug in list(set(list(proximity_dict_DJ.keys())) - set(top50_DJ)):
    if drug in pd_drug:
        print(len(drug_gene_dict[drug]))
        
for drug in list(proximity_dict_SP.keys()):
    if drug in pd_drug:
        print(len(drug_gene_dict[drug]))
        
for drug in list(proximity_dict_DJ.keys()):
    if drug in pd_drug:
        print(len(drug_gene_dict[drug]))
        
for drug in only_DJ:
    if drug in pd_drug:
        print(drug)
        
target_num_SP = []
for drug in list(proximity_dict_SP.keys()):
    target_num_SP.append(len(drug_gene_dict[drug]))
    
target_num_SP

target_num_DJ = []
for drug in list(proximity_dict_DJ.keys()):
    target_num_DJ.append(len(drug_gene_dict[drug]))
    
from scipy import stats
stats.pearsonr(target_num_SP, target_num_DJ) # 딱히 연관성 없음

pd_target_num_SP = []
for drug in list(proximity_dict_SP.keys()):
    if drug in pd_drug:
        pd_target_num_SP.append(len(drug_gene_dict[drug]))

pd_index_SP = []
for drug in list(proximity_dict_SP.keys()):
    if drug in pd_drug:
        pd_index_SP.append(list(proximity_dict_SP.keys()).index(drug))
        
pd_target_num_SP

stats.spearmanr(pd_target_num_SP)

pd_target_num_DJ = []
for drug in list(proximity_dict_DJ.keys()):
    if drug in pd_drug:
        pd_target_num_DJ.append(len(drug_gene_dict[drug]))
        
stats.pearsonr(pd_target_num_SP, pd_target_num_DJ) # 딱히 연관성 없음

plt.figure(figsize=(7,7))
####################################################################################
y_SP_final = []
y_pred_final = []

for element in sorted_proximity_dict_SP_final:
    y_SP_final.append(element[1][1])
    y_pred_final.append(element[1][0])

y_SP_final = np.array(y_SP_final)
y_pred_final = np.array(y_pred_final)

fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_SP_final, 1-y_pred_final)

auc_1 = round(metrics.auc(fpr, tpr),4)
plt.plot(fpr,tpr,label="Non-weighted path length", linewidth=3, color=cm_skip[0])
#plot_roc_curve(fpr, tpr)
####################################################################################
y_DJ = []
y_pred = []

for element in sorted_proximity_dict_DJ:
    y_DJ.append(element[1][1])
    y_pred.append(element[1][0])

y_DJ = np.array(y_DJ)
y_pred = np.array(y_pred)

fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_DJ, 1-y_pred) # 반대로 되고 있었다.

auc_2 = round(metrics.auc(fpr, tpr),4)
plt.plot(fpr,tpr,label="Weighted path length (STEP 1)", linestyle='--', linewidth=3, color=cm_skip[4])
#plot_roc_curve(fpr, tpr)
####################################################################################
y_DJ_final = []
y_pred_final = []

for element in sorted_proximity_dict_DJ_final:
    y_DJ_final.append(element[1][1])
    y_pred_final.append(element[1][0])

y_DJ_final = np.array(y_DJ_final)
y_pred_final = np.array(y_pred_final)

fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_DJ_final, 1-y_pred_final) # 반대로 되고 있었다.

#plot_roc_curve(fpr, tpr)

auc_3 = round(metrics.auc(fpr, tpr),4)
plt.plot(fpr,tpr,label="Weighted path length (STEP 1 & 2)", linewidth=3, color=cm_skip[3])

plt.legend(loc='lower right')
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic Curve')

cm = plt.cm.get_cmap('tab20c')

skip = []
for i in range(0,len(cm.colors)//4+1):
    skip.append(4*i)
# the colormap is called Vega in my Matplotlib version


cm_skip = [cm.colors[i] for i in range(len(cm.colors)) if i not in skip]

for i, c in enumerate(cm_skip):
    x = np.linspace(0,1)
    y = (i+1)*x + i
    plt.plot(x, y, color=c, linewidth=4)
    
x = ["Non-weighted path length", "STEP 1", "STEP 1 & 2"]
y = [auc_1, auc_2, auc_3]

plt.bar(x,y,color=[cm_skip[0], cm_skip[4], cm_skip[3]],edgecolor='black')
plt.ylim([0,0.8])
plt.title("AUROC")

for i, v in enumerate(x):
    plt.text(v, y[i], y[i],                 # 좌표 (x축 = v, y축 = y[0]..y[1], 표시 = y[0]..y[1])
             fontsize = 15, 
             color='black',
             horizontalalignment='center',  # horizontalalignment (left, center, right)
             verticalalignment='bottom')    # verticalalignment (top, center, bottom)

plt.show()

plt.figure()
####################################################################################
y_SP_final = []
y_pred_final = []

for element in sorted_proximity_dict_SP_final:
    y_SP_final.append(element[1][1])
    y_pred_final.append(element[1][0])

y_SP_final = np.array(y_SP_final)
y_pred_final = np.array(y_pred_final)

fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_SP_final, 1-y_pred_final)

auc_1 = round(metrics.auc(fpr, tpr),4)
plt.plot(fpr,tpr,label="Non-weighted path length | AUC = %s"%str(round(metrics.auc(fpr, tpr),4)), color=cm_skip[0])
#plot_roc_curve(fpr, tpr)
####################################################################################
y_DJ_final = []
y_pred_final = []

for element in sorted_proximity_dict_DJ_final:
    y_DJ_final.append(element[1][1])
    y_pred_final.append(element[1][0])

y_DJ_final = np.array(y_DJ_final)
y_pred_final = np.array(y_pred_final)

fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_DJ_final, 1-y_pred_final) # 반대로 되고 있었다.

#plot_roc_curve(fpr, tpr)

auc_3 = round(metrics.auc(fpr, tpr),4)
plt.plot(fpr,tpr,label="Weighted path length | AUC = %s"%str(round(metrics.auc(fpr, tpr),4)), color=cm_skip[3])
plt.legend(loc='lower right')
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic Curve')

x = ["Non-weighted path length", "Weighted path length"]
y = [auc_1, auc_3]

plt.bar(x,y,color=[cm_skip[0], cm_skip[3]],edgecolor='black')
plt.ylim([0,0.8])
plt.title("AUROC")

for i, v in enumerate(x):
    plt.text(v, y[i], y[i],                 # 좌표 (x축 = v, y축 = y[0]..y[1], 표시 = y[0]..y[1])
             fontsize = 15, 
             color='black',
             horizontalalignment='center',  # horizontalalignment (left, center, right)
             verticalalignment='bottom')    # verticalalignment (top, center, bottom)

plt.show()

x = []
ind = 0

for i in range(len(Precision_DJ_final)):
    x.append(ind)
    ind += 1

plt.plot(x, Recall_DJ_final, color='black')
plt.title("Recall change")

