import csv

proximity_dict_SP_raw = {}

with open('proximity_SP_final.tsv') as f:
    tr = csv.reader(f, delimiter='\t')
    row1 = next(tr)
    for row in tr:
        proximity_dict_SP_raw[row[0]] = (float(row[1]), float(row[2]))
        
# Proximity가 높은 약물 순서대로 나열 (Barabasi)
top50_SP = list(proximity_dict_SP.keys())[:50]

proximity_dict_SP_final = {}
for drug in proximity_dict_SP_raw.keys():
    proximity_dict_SP_final[drug] = proximity_dict_SP_raw[drug][0]
    
proximity_dict_DJ_raw = {}

with open('proximity_DJ_final.tsv') as f:
    tr = csv.reader(f, delimiter='\t')
    row1 = next(tr)
    for row in tr:
        proximity_dict_DJ_raw[row[0]] = (float(row[1]), float(row[2]))
        
# Proximity가 높은 약물 순서대로 나열 (Pathway-weighted)
top50_DJ = list(proximity_dict_DJ.keys())[:50]

proximity_dict_DJ_final = {}
for drug in proximity_dict_DJ_raw.keys():
    proximity_dict_DJ_final[drug] = proximity_dict_DJ_raw[drug][0]
    
proximity_dict_DJ_hypo1 = {}

with open('proximity_DJ.tsv') as f:
    tr = csv.reader(f, delimiter='\t')
    row1 = next(tr)
    for row in tr:
        proximity_dict_DJ_hypo1[row[0]] = (float(row[1]), float(row[2]))
        
proximity_dict_DJ = {}
for drug in proximity_dict_DJ_hypo1.keys():
    proximity_dict_DJ[drug] = proximity_dict_DJ_hypo1[drug][0]
    
proximity_dict_SP_final

import pandas as pd
######### Dijkstra path method #########
# Dictionary to dataframe
# 0. Parkinson's disease 치료에 쓰이는 drug 찾기
pd_drug = []
for element in drug_disease_pair:
    if element[1] in ['parkinson disease', 'parkinsonian disorders']:
        pd_drug.append(element[0])
        
# 1. Drug / Non-drug
label = []
ind = 0 # drug label이 잘 들어갔는지 확인
for drug in proximity_dict_DJ_final.keys():
    if drug in pd_drug:
        label.append("PD drug")
        ind += 1
    else:
        label.append("Non PD drug")
        
if ind == len(pd_drug):
    print("Good Job!")
else:
    print("PD drug in dictionary is " + str(ind) + " but actual pd drug is " + str(len(pd_drug)))
    
# 2. proximity list
distance_DJ_final = list(proximity_dict_DJ_final.values())

# 3. dictionary
for_boxplot = {}
for_boxplot['distance'] = distance_DJ_final
for_boxplot['label'] = label

# To dataframe
df = pd.DataFrame(for_boxplot)

######### Shortest path method #########
# 1. Drug / Non-drug
label_SP = []
ind_SP = 0 # drug label이 잘 들어갔는지 확인
for drug in proximity_dict_SP_final.keys():
    if drug in pd_drug:
        label_SP.append("PD drug")
        ind_SP += 1
    else:
        label_SP.append("Non PD drug")
        
if ind_SP == len(pd_drug):
    print("Good Job!")
else:
    print("PD drug in dictionary is " + str(ind_SP) + " but actual pd drug is " + str(len(pd_drug)))
    
# 2. proximity list
distance_SP = list(proximity_dict_SP_final.values())

# 3. dictionary
for_boxplot_SP = {}
for_boxplot_SP['distance'] = distance_SP
for_boxplot_SP['label'] = label_SP

# To dataframe
df_SP = pd.DataFrame(for_boxplot_SP)

######### Dijkstra path method previous version #########
# 1. Drug / Non-drug
label_DJ_0 = []
ind_DJ_0 = 0 # drug label이 잘 들어갔는지 확인
for drug in proximity_dict_DJ.keys():
    if drug in pd_drug:
        label_DJ_0.append("PD drug")
        ind_DJ_0 += 1
    else:
        label_DJ_0.append("Non PD drug")
        
if ind_DJ_0 == len(pd_drug):
    print("Good Job!")
else:
    print("PD drug in dictionary is " + str(ind_DJ_0) + " but actual pd drug is " + str(len(pd_drug)))
    
# 2. proximity list
distance_DJ = list(proximity_dict_DJ.values())

# 3. dictionary
for_boxplot_DJ = {}
for_boxplot_DJ['distance'] = distance_DJ
for_boxplot_DJ['label'] = label_DJ_0

# To dataframe
df_DJ = pd.DataFrame(for_boxplot_DJ)

######### Plot #########

# 일단 sns 들어간 코드 가져오기
import seaborn as sns
import matplotlib.pyplot as plt

#from statannot import add_stat_annotation
fig, axes = plt.subplots(1, 3, figsize=(14,3))
######### Shortest path method #########
x2 = "label"
y2 = "distance"
order2 = ['PD drug', 'Non PD drug']
sns.boxplot(data=df_SP, x=x2, y=y2, order=order2, ax=axes[0])

######### Shortest path method #########
x3 = "label"
y3 = "distance"
order3 = ['PD drug', 'Non PD drug']
sns.boxplot(data=df_DJ, x=x3, y=y3, order=order3, ax=axes[1])

######### Dijkstra path method #########
x = "label"
y = "distance"
order = ['PD drug', 'Non PD drug']
sns.boxplot(data=df, x=x, y=y, order=order, ax=axes[2])
sns.despine() # 필요없는 axis border 제거

axes[0].set_title("Non-weighted path length")
axes[1].set_title("Weighted path length (STEP 1)")
axes[2].set_title("Weighted path length (STEP 1 & 2)")

intersection = list(set(top50_SP) & set(top50_DJ))

print("Number of drugs that are coexist in Barabasi & my method is %d"%len(intersection))

for drug in intersection:
    if drug in pd_drug:
        print(drug)
        
only_SP = list(set(top50_SP) - set(top50_DJ))

for drug in only_SP:
    if drug in pd_drug:
        print(drug + ":" + str(len(drug_gene_dict[drug])))

for drug in list(set(list(proximity_dict_SP.keys())) - set(top50_SP)):
    if drug in pd_drug:
        print(drug + ":" + str(len(drug_gene_dict[drug])))

only_DJ = list(set(top50_DJ) - set(top50_SP))

for drug in only_DJ:
    if drug in pd_drug:
        print(drug + ":" + str(len(drug_gene_dict[drug])) + " (%s)"%list(proximity_dict_DJ.keys()).index(drug))
        
for drug in list(set(list(proximity_dict_DJ.keys())) - set(top50_DJ)):
    if drug in pd_drug:
        print(len(drug_gene_dict[drug]))
        
for drug in list(proximity_dict_SP.keys()):
    if drug in pd_drug:
        print(len(drug_gene_dict[drug]))
        
for drug in list(proximity_dict_DJ.keys()):
    if drug in pd_drug:
        print(len(drug_gene_dict[drug]))
        
for drug in only_DJ:
    if drug in pd_drug:
        print(drug)
        
target_num_SP = []
for drug in list(proximity_dict_SP.keys()):
    target_num_SP.append(len(drug_gene_dict[drug]))
    
target_num_SP

target_num_DJ = []
for drug in list(proximity_dict_DJ.keys()):
    target_num_DJ.append(len(drug_gene_dict[drug]))
    
from scipy import stats
stats.pearsonr(target_num_SP, target_num_DJ) # 딱히 연관성 없음

pd_target_num_SP = []
for drug in list(proximity_dict_SP.keys()):
    if drug in pd_drug:
        pd_target_num_SP.append(len(drug_gene_dict[drug]))

pd_index_SP = []
for drug in list(proximity_dict_SP.keys()):
    if drug in pd_drug:
        pd_index_SP.append(list(proximity_dict_SP.keys()).index(drug))
        
pd_target_num_SP

stats.spearmanr(pd_target_num_SP)

pd_target_num_DJ = []
for drug in list(proximity_dict_DJ.keys()):
    if drug in pd_drug:
        pd_target_num_DJ.append(len(drug_gene_dict[drug]))
        
stats.pearsonr(pd_target_num_SP, pd_target_num_DJ) # 딱히 연관성 없음

plt.figure(figsize=(7,7))
####################################################################################
y_SP_final = []
y_pred_final = []

for element in sorted_proximity_dict_SP_final:
    y_SP_final.append(element[1][1])
    y_pred_final.append(element[1][0])

y_SP_final = np.array(y_SP_final)
y_pred_final = np.array(y_pred_final)

fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_SP_final, 1-y_pred_final)

auc_1 = round(metrics.auc(fpr, tpr),4)
plt.plot(fpr,tpr,label="Non-weighted path length", linewidth=3, color=cm_skip[0])
#plot_roc_curve(fpr, tpr)
####################################################################################
y_DJ = []
y_pred = []

for element in sorted_proximity_dict_DJ:
    y_DJ.append(element[1][1])
    y_pred.append(element[1][0])

y_DJ = np.array(y_DJ)
y_pred = np.array(y_pred)

fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_DJ, 1-y_pred) # 반대로 되고 있었다.

auc_2 = round(metrics.auc(fpr, tpr),4)
plt.plot(fpr,tpr,label="Weighted path length (STEP 1)", linestyle='--', linewidth=3, color=cm_skip[4])
#plot_roc_curve(fpr, tpr)
####################################################################################
y_DJ_final = []
y_pred_final = []

for element in sorted_proximity_dict_DJ_final:
    y_DJ_final.append(element[1][1])
    y_pred_final.append(element[1][0])

y_DJ_final = np.array(y_DJ_final)
y_pred_final = np.array(y_pred_final)

fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_DJ_final, 1-y_pred_final) # 반대로 되고 있었다.

#plot_roc_curve(fpr, tpr)

auc_3 = round(metrics.auc(fpr, tpr),4)
plt.plot(fpr,tpr,label="Weighted path length (STEP 1 & 2)", linewidth=3, color=cm_skip[3])

plt.legend(loc='lower right')
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic Curve')

cm = plt.cm.get_cmap('tab20c')

skip = []
for i in range(0,len(cm.colors)//4+1):
    skip.append(4*i)
# the colormap is called Vega in my Matplotlib version


cm_skip = [cm.colors[i] for i in range(len(cm.colors)) if i not in skip]

for i, c in enumerate(cm_skip):
    x = np.linspace(0,1)
    y = (i+1)*x + i
    plt.plot(x, y, color=c, linewidth=4)
    
x = ["Non-weighted path length", "STEP 1", "STEP 1 & 2"]
y = [auc_1, auc_2, auc_3]

plt.bar(x,y,color=[cm_skip[0], cm_skip[4], cm_skip[3]],edgecolor='black')
plt.ylim([0,0.8])
plt.title("AUROC")

for i, v in enumerate(x):
    plt.text(v, y[i], y[i],                 # 좌표 (x축 = v, y축 = y[0]..y[1], 표시 = y[0]..y[1])
             fontsize = 15, 
             color='black',
             horizontalalignment='center',  # horizontalalignment (left, center, right)
             verticalalignment='bottom')    # verticalalignment (top, center, bottom)

plt.show()

plt.figure()
####################################################################################
y_SP_final = []
y_pred_final = []

for element in sorted_proximity_dict_SP_final:
    y_SP_final.append(element[1][1])
    y_pred_final.append(element[1][0])

y_SP_final = np.array(y_SP_final)
y_pred_final = np.array(y_pred_final)

fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_SP_final, 1-y_pred_final)

auc_1 = round(metrics.auc(fpr, tpr),4)
plt.plot(fpr,tpr,label="Non-weighted path length | AUC = %s"%str(round(metrics.auc(fpr, tpr),4)), color=cm_skip[0])
#plot_roc_curve(fpr, tpr)
####################################################################################
y_DJ_final = []
y_pred_final = []

for element in sorted_proximity_dict_DJ_final:
    y_DJ_final.append(element[1][1])
    y_pred_final.append(element[1][0])

y_DJ_final = np.array(y_DJ_final)
y_pred_final = np.array(y_pred_final)

fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_DJ_final, 1-y_pred_final) # 반대로 되고 있었다.

#plot_roc_curve(fpr, tpr)

auc_3 = round(metrics.auc(fpr, tpr),4)
plt.plot(fpr,tpr,label="Weighted path length | AUC = %s"%str(round(metrics.auc(fpr, tpr),4)), color=cm_skip[3])
plt.legend(loc='lower right')
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic Curve')

x = ["Non-weighted path length", "Weighted path length"]
y = [auc_1, auc_3]

plt.bar(x,y,color=[cm_skip[0], cm_skip[3]],edgecolor='black')
plt.ylim([0,0.8])
plt.title("AUROC")

for i, v in enumerate(x):
    plt.text(v, y[i], y[i],                 # 좌표 (x축 = v, y축 = y[0]..y[1], 표시 = y[0]..y[1])
             fontsize = 15, 
             color='black',
             horizontalalignment='center',  # horizontalalignment (left, center, right)
             verticalalignment='bottom')    # verticalalignment (top, center, bottom)

plt.show()

x = []
ind = 0

for i in range(len(Precision_DJ_final)):
    x.append(ind)
    ind += 1

plt.plot(x, Recall_DJ_final, color='black')
plt.title("Recall change")

x = ["Non-weighted path length", "STEP 1", "STEP 1 & 2"]
y = [auc_1, auc_2, auc_3]

plt.bar(x,y,color=[cm_skip[0], cm_skip[4], cm_skip[3]],edgecolor='black')
plt.ylim([0,0.8])
plt.title("AUROC")

for i, v in enumerate(x):
    plt.text(v, y[i], y[i],                 # 좌표 (x축 = v, y축 = y[0]..y[1], 표시 = y[0]..y[1])
             fontsize = 15, 
             color='black',
             horizontalalignment='center',  # horizontalalignment (left, center, right)
             verticalalignment='bottom')    # verticalalignment (top, center, bottom)

plt.show()

plt.figure()
####################################################################################
y_SP_final = []
y_pred_final = []

for element in sorted_proximity_dict_SP_final:
    y_SP_final.append(element[1][1])
    y_pred_final.append(element[1][0])

y_SP_final = np.array(y_SP_final)
y_pred_final = np.array(y_pred_final)

fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_SP_final, 1-y_pred_final)

auc_1 = round(metrics.auc(fpr, tpr),4)
plt.plot(fpr,tpr,label="Non-weighted path length | AUC = %s"%str(round(metrics.auc(fpr, tpr),4)), color=cm_skip[0])
#plot_roc_curve(fpr, tpr)
####################################################################################
y_DJ_final = []
y_pred_final = []

for element in sorted_proximity_dict_DJ_final:
    y_DJ_final.append(element[1][1])
    y_pred_final.append(element[1][0])

y_DJ_final = np.array(y_DJ_final)
y_pred_final = np.array(y_pred_final)

fpr, tpr, thresholds = sklearn.metrics.roc_curve(y_DJ_final, 1-y_pred_final) # 반대로 되고 있었다.

#plot_roc_curve(fpr, tpr)

auc_3 = round(metrics.auc(fpr, tpr),4)
plt.plot(fpr,tpr,label="Weighted path length | AUC = %s"%str(round(metrics.auc(fpr, tpr),4)), color=cm_skip[3])
plt.legend(loc='lower right')
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic Curve')

x = ["Non-weighted path length", "Weighted path length"]
y = [auc_1, auc_3]

plt.bar(x,y,color=[cm_skip[0], cm_skip[3]],edgecolor='black')
plt.ylim([0,0.8])
plt.title("AUROC")

for i, v in enumerate(x):
    plt.text(v, y[i], y[i],                 # 좌표 (x축 = v, y축 = y[0]..y[1], 표시 = y[0]..y[1])
             fontsize = 15, 
             color='black',
             horizontalalignment='center',  # horizontalalignment (left, center, right)
             verticalalignment='bottom')    # verticalalignment (top, center, bottom)

plt.show()

t2d_gene = disease_gene_dict['diabetes mellitus, type 2']

# 앞서 구한 "Dijkstra path length" vs "Shortest path length"
# Parkinson's disease + Parkinsonian disease 유전자들 한꺼번에 보자

proximity_dict_SP_T2D = {}

start = time.time()

for drug in drug_gene_dict.keys():
    multiple_target_distance = []
    for target_gene in drug_gene_dict[drug]:
        distance_list = []
        for disease_gene in t2d_gene:
            if target_gene in ppi_g_hypo2.nodes and disease_gene in ppi_g_hypo2.nodes:
                distance_list.append(nx.shortest_path_length(ppi_g_hypo2, target_gene, disease_gene))
        multiple_target_distance.append(min(distance_list))

    proximity_dict_SP_T2D[drug] = np.mean(multiple_target_distance) # proximity 평균
        
print("time :", time.time() - start)

import pandas as pd
######### Dijkstra path method #########
# Dictionary to dataframe
# 0. Parkinson's disease 치료에 쓰이는 drug 찾기
t2d_drug = []
for element in drug_disease_pair:
    if element[1] in ['diabetes mellitus type 2']:
        t2d_drug.append(element[0])
    
######### Shortest path method #########
# 1. Drug / Non-drug
label_SP = []
ind_SP = 0 # drug label이 잘 들어갔는지 확인
for drug in proximity_dict_SP_T2D.keys():
    if drug in t2d_drug:
        label_SP.append("Drug")
        ind_SP += 1
    else:
        label_SP.append("Non-drug")
    
# 2. proximity list
distance_SP = list(proximity_dict_SP_T2D.values())

# 3. dictionary
for_boxplot_SP = {}
for_boxplot_SP['distance'] = distance_SP
for_boxplot_SP['label'] = label_SP

# To dataframe
df_SP = pd.DataFrame(for_boxplot_SP)

#from statannot import add_stat_annotation
#fig, axes = plt.subplots(1, 2)
plt.figure()
######### Shortest path method #########
x2 = "label"
y2 = "distance"
order2 = ['Drug', 'Non-drug']
ax = sns.boxplot(data=df_SP, x=x2, y=y2, order=order2) #, ax=axes[0])
ax, test_results = add_stat_annotation(ax, data=df_SP, x=x2, y=y2, order=order2,
                                   box_pairs=[("Drug", "Non-drug")],
                                   test='Mann-Whitney', text_format='star', loc='outside', verbose=2)
sns.despine()
#plt.title("Parkinson's disease")

# NES 분포
import seaborn as sns

sns.distplot(abs(gs_res_final.res2d['NES']))
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa05012']['NES'].values[0]), 0, 2, color='g', linestyle='--', linewidth=0.5)

plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04728']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # hsa04728 - Dopaminergic synapse
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04210']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # hsa04210 - Apoptosis
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04141']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # hsa04141 - Protein processing in endoplasmic reticulum
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04020']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # hsa04020 - Calcium signaling pathway
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04137']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # hsa04137 - Mitophagy
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04140']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # hsa04140 - Autophagy
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04068']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # hsa04068 - foxO signaling
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04010']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # hsa04010 – MAPK signaling pathway
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04064']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # hsa04064 – NF-kappa B signaling pathway
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04150']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # hsa04150 – mTOR signaling pathway
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04152']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # hsa04152 – AMPK signaling pathway
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04151']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # hsa04151 – PI3K-Akt signaling
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04310']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # hsa04310 – Wnt signaling pathway
# plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04060']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # hsa4060 – cytokine-cytokine receptor interaction
# plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04062']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # chemokine signaling pathway
# plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04145']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # Phagosome
# plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04810']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # Regulation of actine cytoskeleton
# plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04144']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # Endocytosis
# plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04540']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # Gap junction
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04510']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # Focal adhesion
# plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04611']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # Platelet activation
# plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04022']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # cGMP-PKG signaling pathway
# plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04512']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # ECM-receptor interaction
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa05010']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # Cocaine addiction
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa05030']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # Alzheimer disease
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa05022']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # Pathways of neurodegeneration
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04360']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # Axon guidance
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04350']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # TGF-beta signaling pathway
plt.axvline(abs(gs_res_final.res2d[gs_res_final.res2d['Term'] == 'hsa04668']['NES'].values[0]), 0, 2, color='r', linestyle='--', linewidth=0.5) # Neuroinflammation - TNF signaling pathway

plt.legend(['NES distribution','Parkinsons disease', 'PD related pathways'])

pd_pathway = ['hsa05012', 'hsa04728', 'hsa04210', 'hsa04141', 'hsa04020', 'hsa04137', 'hsa04140', 'hsa04068', 'hsa04010', 'hsa04064', 'hsa04150', 'hsa04152',
             'hsa04151', 'hsa04310', 'hsa04310', 'hsa04510', 'hsa05010', 'hsa05030', 'hsa05022', 'hsa04360', 'hsa04350', 'hsa04668']

non_pd_pathway = []
for term in gs_res2.res2d['Term']:
    if term not in pd_pathway:
        non_pd_pathway.append(term)
        
pd_NES = []
for pd in pd_pathway:
    pd_NES.append(abs(gs_res2.res2d[gs_res2.res2d['Term'] == pd]['NES'].values[0]))

non_pd_NES = []
for non_pd in non_pd_pathway:
    non_pd_NES.append(abs(gs_res2.res2d[gs_res2.res2d['Term'] == non_pd]['NES'].values[0]))

scipy.stats.ttest_ind(pd_NES, non_pd_NES, equal_var=False)

ratio = [len(non_pd_pathway), len(pd_pathway)]
labels = ['Random pathway', 'PD pathway']

plt.pie(ratio, labels=labels, autopct='%.1f%%')
plt.show()

# Drug vs Non-drug p-value 구하기
import scipy.stats

######### Shortest path method #########
drug_SP = []
non_drug_SP = []
for drug in proximity_dict_SP_final.keys():
    if drug in pd_drug:
        drug_SP.append(proximity_dict_SP_final[drug])
    else:
        non_drug_SP.append(proximity_dict_SP_final[drug])
p_value_SP = scipy.stats.ttest_ind(drug_SP, non_drug_SP, alternative='less', equal_var=True)
print(p_value_SP)

######### Dijkstra path method #########
drug_DJ_0 = []
non_drug_DJ_0 = []
for drug in proximity_dict_DJ.keys():
    if drug in pd_drug:
        drug_DJ_0.append(proximity_dict_DJ[drug])
    else:
        non_drug_DJ_0.append(proximity_dict_DJ[drug])
p_value_DJ_0 = scipy.stats.ttest_ind(drug_DJ_0, non_drug_DJ_0, alternative='less', equal_var=True)
print(p_value_DJ_0)

######### Dijkstra path method #########
drug_DJ = []
non_drug_DJ = []
for drug in proximity_dict_DJ_final.keys():
    if drug in pd_drug:
        drug_DJ.append(proximity_dict_DJ_final[drug])
    else:
        non_drug_DJ.append(proximity_dict_DJ_final[drug])
p_value_DJ = scipy.stats.ttest_ind(drug_DJ, non_drug_DJ,alternative='less', equal_var=True)
print(p_value_DJ)
#scipy.stats.ttest_ind(avg_prox, avg_prox_false, equal_var=False)

x = []
ind = 0

for i in range(len(Precision_DJ_final)):
    x.append(ind)
    ind += 1

plt.plot(x, Precision_DJ_final, color='black')
plt.title("Recall change")
